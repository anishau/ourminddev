---
layout: base
title: Welcome
---

<div class="auth-container" id="authContainer">
    <div id="authStatus" class="auth-status"></div>
    <div class="auth-form" id="signInForm">
        <h2>Sign In</h2>
        <form id="loginForm">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">Sign In</button>
        </form>
        <p>Don't have an account? <a href="#" id="showSignUp">Sign Up</a></p>
    </div>

    <div class="auth-form hidden" id="signUpForm">
        <h2>Sign Up</h2>
        <form id="registerForm">
            <div class="form-group">
                <label for="registerEmail">Email</label>
                <input type="email" id="registerEmail" name="email" required>
            </div>
            <div class="form-group">
                <label for="registerPassword">Password</label>
                <input type="password" id="registerPassword" name="password" required>
            </div>
            <button type="submit">Sign Up</button>
        </form>
        <p>Already have an account? <a href="#" id="showSignIn">Sign In</a></p>
    </div>
</div>

<!-- Add this before the closing body tag -->
<script type="module">
    import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm'

    const supabase = createClient(
        '{{ env.supabaseUrl }}',
        '{{ env.supabaseAnonKey }}'
    )

    const showStatus = (message, isError = false) => {
        const statusEl = document.getElementById('authStatus')
        statusEl.textContent = message
        statusEl.style.display = 'block'
        statusEl.className = `auth-status ${isError ? 'error' : 'success'}`
    }

    // Handle Sign In
    document.getElementById('loginForm').addEventListener('submit', async (e) => {
        e.preventDefault()
        const email = document.getElementById('email').value
        const password = document.getElementById('password').value

        try {
            const { data, error } = await supabase.auth.signInWithPassword({
                email,
                password
            })
            if (error) throw error
            showStatus('Successfully signed in!')
            console.log('Signed in:', data)
        } catch (error) {
            showStatus(error.message, true)
            console.error('Error signing in:', error.message)
        }
    })

    // Handle Sign Up
    document.getElementById('registerForm').addEventListener('submit', async (e) => {
        e.preventDefault()
        const email = document.getElementById('registerEmail').value
        const password = document.getElementById('registerPassword').value

        try {
            const { data, error } = await supabase.auth.signUp({
                email,
                password
            })
            if (error) throw error
            showStatus('Successfully signed up! Please check your email for confirmation.')
            console.log('Signed up:', data)
        } catch (error) {
            showStatus(error.message, true)
            console.error('Error signing up:', error.message)
        }
    })

    // Toggle between sign in and sign up forms
    document.getElementById('showSignUp').addEventListener('click', (e) => {
        e.preventDefault()
        document.getElementById('signInForm').classList.add('hidden')
        document.getElementById('signUpForm').classList.remove('hidden')
    })

    document.getElementById('showSignIn').addEventListener('click', (e) => {
        e.preventDefault()
        document.getElementById('signUpForm').classList.add('hidden')
        document.getElementById('signInForm').classList.remove('hidden')
    })
</script>

<style>
    .auth-container {
        max-width: 400px;
        margin: 2rem auto;
        padding: 2rem;
        background: var(--accent);
        border-radius: 4px;
    }

    .auth-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-group input {
        padding: 0.5rem;
        border: 1px solid var(--text);
        border-radius: 2px;
    }

    .hidden {
        display: none;
    }

    button {
        padding: 0.5rem 1rem;
        background: var(--text);
        color: var(--bg);
        border: none;
        border-radius: 2px;
        cursor: pointer;
    }

    button:hover {
        opacity: 0.9;
    }

    .auth-status {
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 4px;
        display: none;
    }

    .auth-status.error {
        background: rgba(255, 0, 0, 0.1);
        color: darkred;
    }

    .auth-status.success {
        background: rgba(0, 255, 0, 0.1);
        color: darkgreen;
    }
</style>

<h1>Mindfulness and Curiosity</h1>

<p>

Full-blown psychosis can feel like a waterfall. Overwhelming, with no ability to press pause. However, in the build up to and in the aftermath of, symptoms can feel less all-consuming. In these somewhat lower-key moments is it possible to refine one's ability to press pause, and activate curiosity without jumping into judgement? <br><br>
Through a customizeable recipe of pressing pausing and activating curiosity, can one form a more balanced self? Can this allow one to avoid or diminish the intensity of full-blown episodes?<br><br>

It may be useful to practice pressing pause and moving into activating curiosity in one flow, even if pressing pause is still a struggle. <br><br>
This is because the answers to the questions asked when activating curiosity can be helpful when pressing pause. A braided circle of sorts.<br>
<br>
In addition, this website hosts notes written by those who have experienced altered states of mind about these states and what caring for them has felt like.


</p>
<h2>Pressing Pause</h2>
"Pressing pause" is a technique largely drawn from mindfulness, as a way to create a boundary between oneself and the disturbing experience. A way of building a protective cocoon from which you can observe your experience without getting lost within it. In each section, I provide some ideas for pressing pause, but each person will have their own methods that work best.

<h2>Activating Curiosity</h2>

"Activating curiosity" allows you to wonder what pain points the distressing experiences call back to. By exploring these points, can you recognize and grow around, learning to hold, the hurt parts of yourself? In each section, I provide some ideas for activating curiosity, but each person will have their own methods that work best.
<div class="content-grid">
    <a href="/hearing-voices" class="content-card">
        <h2>Hearing Voices</h2>
        <p>In moments where voices are present, how can you restore yourself?</p>
    </a>
    
    <a href="/paranoia" class="content-card">
        <h2>Paranoia</h2>
        <p>In moments where paranoia overtures, how can one remain connected to shared reality?</p>
    </a>

        <a href="/field_notes" class="content-card">
        <h2>Field Notes</h2>
        <p>Lived Experience</p>
    </a>
</div>

<style>
    .content-grid {
        display: grid;
        gap: 1.5rem;
        margin: 2rem 0;
    }
    .content-card {
        padding: 1.5rem;
        border: 1px solid var(--accent);
        text-decoration: none;
        color: inherit;
        border-radius: 2px;
    }
    .content-card:hover {
        background: var(--accent);
    }
    .content-card h2 {
        margin: 0;
    }
    .content-card p {
        margin: 0.5rem 0 0 0;
        opacity: 0.8;
    }
</style> 